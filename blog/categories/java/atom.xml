<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Bitwise Evolution]]></title>
  <link href="http://creswick.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://creswick.github.com/"/>
  <updated>2012-08-30T17:53:11-07:00</updated>
  <id>http://creswick.github.com/</id>
  <author>
    <name><![CDATA[Rogan Creswick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bitten by dependency management]]></title>
    <link href="http://creswick.github.com/blog/2009/05/23/bitten-by-dependency-management/"/>
    <updated>2009-05-23T00:00:00-07:00</updated>
    <id>http://creswick.github.com/blog/2009/05/23/bitten-by-dependency-management</id>
    <content type="html"><![CDATA[<p><a href="http://blog.ciscavate.org/wp-content/2009/05/dependencies.png"><img src="http://blog.ciscavate.org/wp-content/2009/05/dependencies-small.png" alt="dependencies-small" title="dependencies-small" width="145" height="200" class="alignright size-full wp-image-106" /></a>I've started using Maven to manage my java projects, and overall I'm very happy with it.  It seems to be more mature than ivy, with better documentation, and the vast majority of tasks that I need "just work" (just don't ask me about jni--that's another post).</p>

<p>Today, (and yesterday, and a good portion of the night in-between) I ran into a nasty bug in a library that I didn't know my code depended on.  It isn't particularly important <em>what</em> I was working on, but just for context: I needed to strip a lot of text content out of nodes in the complete wikipedia revision history dump, so I was using Sax to parse the xml stream, filter out the stuff I wanted filtered out, and save the stuff that, well, I wanted saved.  Being that the input was all of wikipedia, there were a fair number of unicode characters in there.  As it turns out, the 2.6.2 xercesImpl has some sort of bug that allows xml with certain characters to be read without throwing exceptions, but when you try to write the chars that were actually read, you end up trying to write characters that aren't valid in xml.  Even if I'd known that in advance, my response would have been something like "ok, so what? I'm not using xercesImpl, and certainly not a version <em>that</em> old".</p>

<p>Well.</p>

<p>You see, in addition to using Maven, I've also been using the <a href="http://code.google.com/p/google-collections/">Google Collections</a> and <a href="http://code.google.com/p/jsr-305/">JSR305</a> libraries, so I just drop those <code>&lt;dependency&gt;</code> entries into the pom for all my new projects--I just assume that I'll need them, and I usually do.</p>

<p>Unfortunately, JSR305 1.3.8 depends on jaxen 1.1.1, which depends on xercesImpl 2.6.2 (jaxen also needs this dependency via xom 1.0, for what that's worth).</p>

<p>Because that dependency was already present in my build path (via <code>mvn eclipse:eclipse</code>) and in the generated jar (via <code>&lt;addClasspath&gt;</code> and <code>&lt;classpathPrefix&gt;</code> in the <code>maven-jar-plugin</code>  configuration section), I never realized that my sax code actually had a <em>direct</em> dependency on xerces as well.  This all came to a head when, 3.53gb into my 2.8tb run, these rather unhelpful exceptions started popping up:</p>

<p>[cc lang="bash"]
java.io.IOException: The character '?' is an invalid XML character</p>

<pre><code>   at org.apache.xml.serialize.BaseMarkupSerializer.characters(Unknown
</code></pre>

<p>Source)</p>

<pre><code>   at com.stottlerhenke.tools.wikiparse.ContentStripper.characters(ContentStripper.java:195)
   at org.apache.xerces.parsers.AbstractSAXParser.characters(Unknown
</code></pre>

<p>Source)</p>

<pre><code>   at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown
</code></pre>

<p>Source)</p>

<pre><code>   at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown
</code></pre>

<p>Source)</p>

<pre><code>   at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
   at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
   at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
   at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
   at com.stottlerhenke.tools.wikiparse.ContentStripper.parse(ContentStripper.java:96)
   at com.stottlerhenke.tools.wikiparse.ContentStripper.main(ContentStripper.java:379)
</code></pre>

<p>[/cc]</p>

<p><code>&lt;rant&gt;</code> "?" is not unicode -- it fits just fine in asci tables everywhere -- so please don't tell me that it's an invalid unicode character :) (0xd800 <em>is</em> an invalid unicode character, and that would have been <em>much</em> more helpful) <code>&lt;/rant&gt;</code></p>

<p>Many hours later I was able to find a sample of the actual input that was causing these problems, and I was able to reproduce the issue with an input slightly smaller than 2.8tb.  Once that was done, I set out to make a minimal test case.  Rather than bother with a new maven project, I just hacked it out in emacs (not using google collections, etc. because, clearly, I wanted it minimal).  To my surprise, everything worked, and worked fantastically! But how? I didn't even supply an xml api on the classpath, yet it ran just fine!</p>

<p>In truth, I <em>did</em> supply an xml api -- xercesImpl.jar, and many other libraries -- via my environment's <code>$CLASSPATH</code>.  (Figuring that out was another adventure, but I digress.)  Once it became clear that I was indeed using a broken library it was simply a matter of explicitly specifying the dependency on a new version of xercesImpl, and rebuilding.</p>

<p>The moral?</p>

<p>Know your dependencies!  This should come along with knowing your language's built-in APIs well.  It wasn't clear to me that the SAX packages I was using were not part of the core java API, so it didn't strike me as odd that I didn't need to specify a classpath entry or a pom dependency before I could use sax.</p>

<p>If you suspect something strange, you can see the dependency tree in the generated html documentation you get when running <code>mvn site</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Wizards in Java]]></title>
    <link href="http://creswick.github.com/blog/2008/07/02/creating-wizards-in-java/"/>
    <updated>2008-07-02T00:00:00-07:00</updated>
    <id>http://creswick.github.com/blog/2008/07/02/creating-wizards-in-java</id>
    <content type="html"><![CDATA[<p>A recent project at work required building a multi-step dialog to manage the interface between a user and an expert system (and some fairly advanced NLP to boot).  On the surface this looked like a fairly standard Wizard problem -- design a bunch of screens with questions, and then collect the answers as the user proceeded through the dialogs.  However, the Wizard APIs I found were either not very mature or (in the case of the <a href="http://wizard.dev.java.net">Java.net Wizards</a>) it was very difficult to create complex branching behaviors, and those branches were extremely resistant to change.  Both things are essentially show-stoppers when working with prototypes that frequently need modification.</p>

<p>In the end, I spent a weekend and a couple evenings building a new Wizard API for Java, called <a href="http://code.google.com/p/cjwizard">CJWizard</a>.  The library is released under the Apache V.2 license, so it should work for just about anything you want to use it for.  I would like to know if you're using it, and what you're using it for, just to sate my own curiosity :).  The project is hosted on code.google.com, so please submit issues, and feel free to contribute to the project.</p>

<p><a href="http://code.google.com/p/cjwizard">CJWizard</a> provides the structure needed to quickly create simple dialogs by implementing an abstract class (WizardPage) for each page of the dialog, and adding them to a PageFactory that can generate pages on-demand, as they are required.  This puts the programmer in full control of how the wizard proceeds.  The CJWizard architecture also makes it easy to add a wizard to an existing application (either via an additional JDialog, or embedding in some other component), and/or insert custom wrapper widgets around the dialog pages--meaning that you can quickly add customized navigational controls aside from the standard Previous/Next/Finish/Cancel buttons.</p>

<p>Some aspects were taken from the Java.Net wizard API, such as auto-detecting named components, and automatically collecting the values from them, but CJWizard takes a much simpler approach (and in some ways, a less powerful one -- CJWizard does not listen to every key event, only collecting values when the user navigates away from a WizardPage). In most cases, you only need to name widgets prior to adding them to the WizardPage, and their values will be collected in a settings map automatically.</p>

<p>CJWizard was meant to provide a flexible way to generate professional-looking multi-step dialogs very quickly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day to day Memoization]]></title>
    <link href="http://creswick.github.com/blog/2008/01/28/day-to-day-memoization/"/>
    <updated>2008-01-28T00:00:00-08:00</updated>
    <id>http://creswick.github.com/blog/2008/01/28/day-to-day-memoization</id>
    <content type="html"><![CDATA[<p>Memoization (not <strong>memorization</strong>) is the process of remembering the
results of a computation for use later.  (I think of it as "making a
memo" to look back on later.)  Memoization is the core to any dynamic
programming implementation, and allows many simple algorithms to run
in linear or polynomial time when they would otherwise take an
exponential number of operations to complete.  This is most obvious in
the typical recursive Fibonacci example.  Consider the code:</p>

<p>[cc lang="java"]
public class Fib{
   public static void main(String[] args){</p>

<pre><code>  System.out.println("done: fib of "+args[0]+"="+
  fib(Integer.parseInt(args[0])));
</code></pre>

<p>   }</p>

<p>   public static int fib(int n){</p>

<pre><code>  int rval = 1;
  if (n &amp;gt;= 2){
     rval = fib(n - 1) + fib(n - 2);
  }
  System.out.println("fib("+n+") = "+rval);
  return rval;
</code></pre>

<p>   }
}[/cc]
This is a straight-forward recursive implementation of fib.  When run
with <code>n=4</code>, we see this:
[cc lang="bash"]
$ javac Fib.java &amp;&amp; java Fib 4
fib(1) = 1
fib(0) = 1
fib(2) = 2
fib(1) = 1
fib(3) = 3
fib(1) = 1
fib(0) = 1
fib(2) = 2
fib(4) = 5
done: fib of 4=5
[/cc]</p>

<p><strong>9</strong> invocations of <code>fib(n)</code>, but only 5 <strong>unique</strong> invocations.  Lets
memoize the results, and try this again:</p>

<p>[cc lang="bash"]
$ javac Fib.java &amp;&amp; java Fib 4
fib(1) = 1
fib(0) = 1
fib(2) = 2
fib(3) = 3
fib(4) = 5
done: fib of 4=5
[/cc]</p>

<p><strong>Much</strong> better -- 5 invocations, 5 unique sets of parameters.</p>

<p>Here's the source with memoization:
[cc lang="java"]
public class Fib{
   static Map&lt;Integer, Integer&gt; memos = new HashMap(); // new</p>

<p>   public static void main(String[] args){</p>

<pre><code>  System.out.println("done: fib of "+args[0]+"="+
  fib(Integer.parseInt(args[0])));
</code></pre>

<p>   }</p>

<p>   public static int fib(int n){</p>

<pre><code>  if (memos.containsKey(n)) // new
     return memos.get(n);  // new

  int rval = 1;
  if (n &amp;gt;= 2) {
     rval = fib(n - 1) + fib(n - 2);
  }
  System.out.println("fib("+n+") = "+rval);
  memos.put(n, rval);       // new
  return rval;
</code></pre>

<p>   }
}[/cc]
Notice that we only needed to add 4 new lines of code in order to
memoize the results.  When <code>fib(n)</code> is called, it simply checks to see
if it has previously been called with n, and if so, that result is
used again.  If the parameter has never been seen before, the method
continues as normal, storing the computed result before returning.
Memoization turns this naive (and exponential) implementation of <code>fib(n)</code>
into an efficient (linear) operation.</p>

<h2>Memoization in the real world</h2>

<p>So, (un?)fortunately we don't spend all day implementing cool new ways
of computing ever increasing entries of the fibinocci sequence -- how
can memoization be put to use? After all, many algorithms are already
implemented in some fairly optimal fashion by the language APIs, and
you'd be a fool not to use those implementations.  What opportunity
will you have to memoize functions?</p>

<p>It turns out that you can memoize <em>anything</em>, as long as the function
is <em>pure</em> with respect to the memos (meaning: the function doesn't depend on any thing that is not used to key the hash of memos).  If the function is not pure, then you can still use memoization, but either the memo hash must key on all the state and parameters that can affect the results of the function.  On the other hand, if f depends on some state that changes very rarely, then it may make more sense to simply discard all the stored memos each time that aspect of state is altered.</p>

<p>Memoization is extremely handy when you have very common operations that are
fairly expensive.  I recently needed to optimize some code that
compares strings based on the case-insensitive stems of the words,
with stopwords removed.  So the strings "he wanted an apple" and "he
wants apples" should be equal. ("an" is a stopword, and ignored)</p>

<p>This meant doing many, many calls to a string stemmer, each of which
is a fairly expensive operation.  Fortunately, hashing strings as
extremely cheap (on the order of 1/4th the time it took to stem a
string of the same length), and I had plenty of memory to store the
parameters and the results in a <code>Map</code>.  Adding memos to
the two primary time-hoggers (the stemmer and a tokenizer) cut the
execution time of the application down from 2 hours to just over 7
minutes.</p>

<h2>Summary</h2>

<p>You can memoize any function that only depends on it's parameters and
constant state (or near-constant state -- just don't forget to discard your
memos when the state changes!).  If the function is invoked multiple
times you will probably see a performance improvement.</p>

<p>If you need to memoize a function with multiple arguments, then you
just need to nest Maps, or create a unique key by combining the
parameters in some way.</p>

<p>Memoization is an extremely easy way to improve performance under
certain circumstances, particularly if you have a solid grasp on when
state changes outside of your methods / functions, or program in a
functional style.  It can be memory intensive, however.  If the
results of your functions are large, or maintain references to large
objects, then memoization may <strong>penalize</strong> performance if you run out of
memory and have to make use of swap space.</p>
]]></content>
  </entry>
  
</feed>
